{"version":3,"file":"static/js/463.159225fc.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/commonComponents/RobotCard/RobotCard.module.css?0873","components/commonComponents/RobotCard/index.js","components/commonComponents/RobotCard/RobotCard.jsx","webpack://my-react-app/./src/pages/RobotsPage/RobotsPage.module.css?e9bc","pages/RobotsPage/index.js","pages/RobotsPage/RobotsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"RobotCard_cont__Wt4wb\",\"name\":\"RobotCard_name__VG3H+\",\"usersCardRobot\":\"RobotCard_usersCardRobot__3qwf5\",\"robotAvatar\":\"RobotCard_robotAvatar__oM2TU\",\"img\":\"RobotCard_img__j5L7W\",\"robotStatus\":\"RobotCard_robotStatus__EP85D\",\"selectBot\":\"RobotCard_selectBot__K6Bt9\",\"selectBotActive\":\"RobotCard_selectBotActive__Mx-9i\",\"violetTh\":\"RobotCard_violetTh__PmpVS\",\"violetThBtn\":\"RobotCard_violetThBtn__VD9o9\"};","import RobotCard from \"./RobotCard\";\r\n\r\nexport default RobotCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport roby from \"../../../images/Roby.jpg\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport styles from \"./RobotCard.module.css\";\r\n\r\nexport default function RobotCard({\r\n  theme,\r\n  handleClick,\r\n  name,\r\n  position,\r\n  isSelected,\r\n  user,\r\n}) {\r\n  return (\r\n    <div className={styles.cont}>\r\n      <div className={clsx(styles.name, theme === \"violet\" && styles.violetTh)}>\r\n        {name}\r\n      </div>\r\n      <div\r\n        className={clsx(\r\n          styles.usersCardRobot,\r\n          theme === \"violet\" && styles.violetTh\r\n        )}>\r\n        {user ? user.username : \"tradegaby19\"}\r\n      </div>\r\n      <div className={styles.robotAvatar}>\r\n        <img\r\n          className={styles.img}\r\n          src={user ? user.avatarBase64 : roby}\r\n          alt=\"cBot Avatar\"\r\n        />\r\n      </div>\r\n      <div\r\n        className={clsx(\r\n          styles.robotStatus,\r\n          theme === \"violet\" && styles.violetTh\r\n        )}>\r\n        <span>☁️</span>\r\n        <span className={styles.position}>{position}</span>\r\n      </div>\r\n      <button\r\n        className={clsx(\r\n          styles.selectBot,\r\n          theme === \"violet\" && styles.violetThBtn,\r\n          isSelected && styles.selectBotActive\r\n        )}\r\n        onClick={handleClick}>\r\n        {isSelected ? `${name} selected` : `Choose ${name}`}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nRobotCard.propTypes = {\r\n  handleClick: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  position: PropTypes.number,\r\n  isSelected: PropTypes.bool,\r\n  theme: PropTypes.string,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"RobotsPage_cont__nybL9\",\"lightCont\":\"RobotsPage_lightCont__hPQJn\",\"darkCont\":\"RobotsPage_darkCont__Ug5cd\",\"violetCont\":\"RobotsPage_violetCont__X-aQp\"};","import RobotsPage from \"./RobotsPage\";\r\n\r\nexport default RobotsPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\r\n\r\nimport RobotCard from \"../../components/commonComponents/RobotCard\";\r\n\r\nimport styles from \"./RobotsPage.module.css\";\r\n\r\nexport default function RobotsPage() {\r\n  const [isSelectedId, setIsSelectedId] = useState(null);\r\n\r\n  const {theme} = useAuth();\r\n\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const [robots, setRobots] = useState(() => {\r\n    const raw = localStorage.getItem(\"cBots\");\r\n    const parsed = raw ? JSON.parse(raw) : [];\r\n\r\n    const makeId = () => {\r\n      if (crypto && crypto.randomUUID) return crypto.randomUUID();\r\n      return `rid_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;\r\n    };\r\n\r\n    const withIds = parsed.map((r) => ({\r\n      ...r,\r\n      id: r.id ?? makeId(),\r\n    }));\r\n\r\n    // salvăm ID-urile generate în localStorage\r\n    localStorage.setItem(\"cBots\", JSON.stringify(withIds));\r\n    return withIds;\r\n  });\r\n\r\n  // Funcție comună pentru recitire date\r\n  const syncFromLocalStorage = () => {\r\n    const rawBots = localStorage.getItem(\"cBots\");\r\n    const parsedBots = rawBots ? JSON.parse(rawBots) : [];\r\n    setRobots(parsedBots);\r\n\r\n    const rawSelected = localStorage.getItem(\"cBotSelected\");\r\n    if (rawSelected) {\r\n      try {\r\n        const parsedSelected = JSON.parse(rawSelected);\r\n        setIsSelectedId(parsedSelected.id || null);\r\n      } catch (e) {\r\n        console.error(\"Eroare parsare cBotSelected:\", e);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    syncFromLocalStorage();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === \"cBots\" || e.key === \"cBotSelected\") {\r\n        syncFromLocalStorage();\r\n      }\r\n    };\r\n    window.addEventListener(\"storage\", handleStorageChange);\r\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"cBots\", JSON.stringify(robots));\r\n  }, [robots]);\r\n\r\n  function handleSelectRobot(id) {\r\n    setIsSelectedId(id);\r\n    const selectedRobot = robots.find((r) => r.id === id);\r\n    if (selectedRobot) {\r\n      localStorage.setItem(\"cBotSelected\", JSON.stringify(selectedRobot));\r\n    }\r\n  }\r\n\r\n  function handleDragEnd(result) {\r\n    if (!result.destination) return;\r\n\r\n    const reordered = Array.from(robots);\r\n    const [moved] = reordered.splice(result.source.index, 1);\r\n    reordered.splice(result.destination.index, 0, moved);\r\n\r\n    setRobots(reordered);\r\n    localStorage.setItem(\"cBots\", JSON.stringify(reordered));\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleDragEnd}>\r\n      <Droppable droppableId=\"robotsDroppable\">\r\n        {(provided) => (\r\n          <div\r\n            className={clsx(\r\n              styles.cont,\r\n              theme === \"light\"\r\n                ? styles.lightCont\r\n                : theme === \"violet\"\r\n                ? styles.violetCont\r\n                : styles.darkCont\r\n            )}\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}>\r\n            {robots.map((robot, i) => (\r\n              <Draggable key={robot.id} draggableId={robot.id} index={i}>\r\n                {(provided) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}>\r\n                    <RobotCard\r\n                      user={user || null}\r\n                      position={i + 1}\r\n                      name={robot.cBotName}\r\n                      handleClick={() => handleSelectRobot(robot.id)}\r\n                      isSelected={isSelectedId === robot.id}\r\n                      theme={theme}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </Draggable>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}\r\n"],"names":["_ref","theme","handleClick","name","position","isSelected","user","_jsxs","className","styles","cont","children","_jsx","clsx","violetTh","usersCardRobot","username","robotAvatar","img","src","avatarBase64","roby","alt","robotStatus","selectBot","violetThBtn","selectBotActive","onClick","isSelectedId","setIsSelectedId","useState","useAuth","JSON","parse","localStorage","getItem","robots","setRobots","raw","parsed","withIds","map","r","_r$id","id","crypto","randomUUID","Date","now","Math","random","toString","slice","setItem","stringify","syncFromLocalStorage","rawBots","parsedBots","rawSelected","parsedSelected","e","console","error","useEffect","handleStorageChange","key","window","addEventListener","removeEventListener","DragDropContext","onDragEnd","result","destination","reordered","Array","from","moved","splice","source","index","Droppable","droppableId","provided","droppableProps","ref","innerRef","robot","i","Draggable","draggableId","draggableProps","dragHandleProps","RobotCard","cBotName","selectedRobot","find","handleSelectRobot","placeholder"],"sourceRoot":""}