{"version":3,"file":"static/js/957.0c0a96de.chunk.js","mappings":"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","sources":["hooks/useFormValidation.js","hooks/usePasswordStrength.js","webpack://my-react-app/./src/components/commonComponents/Input/Input.module.css?389e","components/commonComponents/Input/Input.jsx","hooks/useFormTouched.js","hooks/validateNewPassword.js","webpack://my-react-app/./src/components/ResetPaswwordForm/ResetPaswwordForm.module.css?bb47","components/ResetPaswwordForm/ResetPaswwordForm.jsx","components/ResetPaswwordForm/index.js","webpack://my-react-app/./src/pages/ResetPasswordPage/ResetPasswordPage.module.css?45d5","pages/ResetPasswordPage/index.js","pages/ResetPasswordPage/ResetPasswordPage.jsx","hooks/useToggle.js","webpack://my-react-app/./src/components/commonComponents/Button/Button.module.css?4e57","components/commonComponents/Button/index.js","components/commonComponents/Button/Button.jsx"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useFormValidation = (initialState, validateFn) => {\r\n  const [fields, setFields] = useState(initialState);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateFields = () => {\r\n    const newErrors = validateFn(fields);\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  return {\r\n    fields,\r\n    setFields,\r\n    errors,\r\n    validateFields,\r\n  };\r\n};\r\n\r\nexport default useFormValidation;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst usePasswordStrength = (password) => {\r\n  const [strength, setStrength] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const calculatePasswordStrength = (password) => {\r\n      let strength = 0;\r\n\r\n      if (password.length > 7) strength += 1;\r\n      if (password.length > 10) strength += 1;\r\n      if (/[A-Z]/.test(password)) strength += 1;\r\n      if (/[0-9]/.test(password)) strength += 1;\r\n      if (/[^A-Za-z0-9]/.test(password)) strength += 1;\r\n\r\n      return strength;\r\n    };\r\n\r\n    setStrength(calculatePasswordStrength(password));\r\n  }, [password]);\r\n\r\n  return strength;\r\n};\r\n\r\nexport default usePasswordStrength;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Input_input__ovt5a\",\"inputCenter\":\"Input_inputCenter__8ObG8\",\"inputInfo\":\"Input_inputInfo__eUz4D\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\n\r\nimport styles from \"./Input.module.css\";\r\n\r\nexport default function Input({\r\n  type,\r\n  placeholder,\r\n  required,\r\n  variant = \"\",\r\n  className,\r\n  name,\r\n  handleChange,\r\n  width,\r\n  value,\r\n  paddingLeft,\r\n  autoComplete,\r\n  handleBlur,\r\n  handleClick,\r\n}) {\r\n  return (\r\n    <div style={{ width: width || \"auto\" }} className={styles.inputContainer}>\r\n      <input\r\n        onClick={handleClick}\r\n        autoComplete={autoComplete || \"off\"}\r\n        style={{ paddingLeft: paddingLeft || \"0px\" }}\r\n        onChange={handleChange}\r\n        name={name || \"\"}\r\n        className={clsx(\r\n          styles.input,\r\n          className,\r\n          variant === \"center\" ? styles.inputCenter : styles.input\r\n        )}\r\n        type={type || \"text\"}\r\n        placeholder={placeholder || \"\"}\r\n        required={required || false}\r\n        value={value || \"\"}\r\n        onBlur={handleBlur}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  paddingLeft: PropTypes.string,\r\n  autoComplete: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  name: PropTypes.string,\r\n  type: PropTypes.string,\r\n  variant: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n  handleClick: PropTypes.func,\r\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  placeholder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n};\r\n","import { useState } from \"react\";\r\n\r\nconst useFormTouched = (initialState = {}) => {\r\n  const [touched, setTouched] = useState(\r\n    Object.keys(initialState).reduce((acc, key) => {\r\n      acc[key] = false;\r\n      return acc;\r\n    }, {})\r\n  );\r\n\r\n  const handleBlur = (field) => () => {\r\n    setTouched((prev) => ({ ...prev, [field]: true }));\r\n  };\r\n\r\n  return {\r\n    touched,\r\n    handleBlur,\r\n  };\r\n};\r\n\r\nexport default useFormTouched;\r\n","const validateNewPassword = (fields) => {\r\n  const newErrors = {};\r\n  if (fields.password.length < 8) {\r\n    newErrors.password = \"Password must be at least 6 characters!\";\r\n  }\r\n  if (!fields.password) {\r\n    newErrors.password = \"Password is required\";\r\n  }\r\n\r\n  return newErrors;\r\n};\r\n\r\nexport default validateNewPassword;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"ResetPaswwordForm_cont__NYDUP\",\"title\":\"ResetPaswwordForm_title__xVhZT\",\"form\":\"ResetPaswwordForm_form__30dQQ\",\"inputs\":\"ResetPaswwordForm_inputs__mClYl\",\"inputContainer\":\"ResetPaswwordForm_inputContainer__OjPUa\",\"inputWrapper\":\"ResetPaswwordForm_inputWrapper__ivjyg\",\"inputError\":\"ResetPaswwordForm_inputError__C92gz\",\"eyeIcon\":\"ResetPaswwordForm_eyeIcon__hyCj0\",\"input\":\"ResetPaswwordForm_input__AlBeQ\",\"error\":\"ResetPaswwordForm_error__-H93v\",\"buttonsContainer\":\"ResetPaswwordForm_buttonsContainer__xN8zV\",\"passwordStrengthBar\":\"ResetPaswwordForm_passwordStrengthBar__7gLSa\",\"passwordStrengthIndicator\":\"ResetPaswwordForm_passwordStrengthIndicator__47azN\"};","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetPassword } from \"../../redux/auth/operationsAuth\";\r\n\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport Input from \"../commonComponents/Input/Input\";\r\nimport Button from \"../commonComponents/Button\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { VscEye, VscEyeClosed } from \"react-icons/vsc\";\r\n\r\nimport useToggle from \"../../hooks/useToggle\";\r\nimport useFormValidation from \"../../hooks/useFormValidation\";\r\nimport validateNewPassword from \"../../hooks/validateNewPassword\";\r\nimport useFormTouched from \"../../hooks/useFormTouched\";\r\nimport usePasswordStrength from \"../../hooks/usePasswordStrength\";\r\n\r\nimport styles from \"./ResetPaswwordForm.module.css\";\r\n\r\nfunction ResetPasswordForm() {\r\n  const navigate = useNavigate();\r\n\r\n  const { token } = useParams();\r\n\r\n  useEffect(() => {\r\n    console.log(\"Token from URL:\", token);\r\n    // Poți valida tokenul aici sau face fetch către backend\r\n  }, [token]);\r\n\r\n  const { fields, setFields, validateFields } = useFormValidation(\r\n    {\r\n      password: \"\",\r\n      passwordConfirm: \"\",\r\n    },\r\n    validateNewPassword\r\n  );\r\n\r\n  const { touched, handleBlur } = useFormTouched();\r\n  const passwordStrength = usePasswordStrength(fields.password);\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const [type, setType] = useState(\"password\");\r\n  const [eyeVisible, toggleEyeVisible] = useToggle(true);\r\n  const [closedEyeVisible, toggleClosedEyeVisible] = useToggle(false);\r\n\r\n  const [confirmType, setConfirmType] = useState(\"password\");\r\n  const [confirmEyeVisible, toggleConfirmEyeVisible] = useToggle(true);\r\n  const [confirmClosedEyeVisible, toggleConfirmClosedEyeVisible] =\r\n    useToggle(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateFields()) return;\r\n\r\n    const { passwordConfirm, ...fieldsWithoutPasswordConfirm } = fields;\r\n    console.log(\"password ;\", fieldsWithoutPasswordConfirm);\r\n\r\n    const newPassword = fieldsWithoutPasswordConfirm.password;\r\n\r\n    dispatch(resetPassword({ token, newPassword }))\r\n      .unwrap()\r\n      .then(() => {\r\n        setFields({\r\n          password: \"\",\r\n          passwordConfirm: \"\",\r\n        });\r\n        toast.success(\"Password reset successful!\");\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setErrorMessage(\"Password not reseted.\");\r\n        toast.error(err);\r\n      });\r\n    navigate(\"/auth/login\");\r\n  };\r\n\r\n  const isFormValid =\r\n    fields.password.length >= 8 && fields.password === fields.passwordConfirm;\r\n\r\n  return (\r\n    <div className={styles.cont}>\r\n      <h1 className={styles.title}>Reset Password</h1>\r\n\r\n      <div className={styles.form}>\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n          <div className={styles.inputs}>\r\n            <div className={styles.inputContainer}>\r\n              <div className={styles.inputWrapper}>\r\n                {eyeVisible && (\r\n                  <VscEye\r\n                    fill=\"var(--brand-color)\"\r\n                    onClick={() => {\r\n                      toggleEyeVisible();\r\n                      toggleClosedEyeVisible();\r\n                      setType(\"text\");\r\n                    }}\r\n                    size=\"24px\"\r\n                    className={styles.eyeIcon}\r\n                  />\r\n                )}\r\n                {closedEyeVisible && (\r\n                  <VscEyeClosed\r\n                    fill=\"#4885e0\"\r\n                    onClick={() => {\r\n                      toggleEyeVisible();\r\n                      toggleClosedEyeVisible();\r\n                      setType(\"password\");\r\n                    }}\r\n                    size=\"24px\"\r\n                    className={styles.eyeIcon}\r\n                  />\r\n                )}\r\n                <Input\r\n                  autoComplete=\"on\"\r\n                  paddingLeft=\"18px\"\r\n                  width=\"100%\"\r\n                  type={type}\r\n                  value={fields.password}\r\n                  handleChange={(e) => {\r\n                    setFields({ ...fields, password: e.target.value });\r\n                  }}\r\n                  handleBlur={handleBlur(\"password\")}\r\n                  placeholder=\"Password\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n              {touched.password && !fields.password && (\r\n                <p className={styles.inputError}>Required</p>\r\n              )}\r\n            </div>\r\n            <div className={styles.inputContainer}>\r\n              <div className={styles.inputWrapper}>\r\n                {confirmEyeVisible && (\r\n                  <VscEye\r\n                    fill=\"var(--brand-color)\"\r\n                    onClick={() => {\r\n                      toggleConfirmEyeVisible();\r\n                      toggleConfirmClosedEyeVisible();\r\n                      setConfirmType(\"text\");\r\n                    }}\r\n                    size=\"24px\"\r\n                    className={styles.eyeIcon}\r\n                  />\r\n                )}\r\n                {confirmClosedEyeVisible && (\r\n                  <VscEyeClosed\r\n                    fill=\"#4885e0\"\r\n                    onClick={() => {\r\n                      toggleConfirmEyeVisible();\r\n                      toggleConfirmClosedEyeVisible();\r\n                      setConfirmType(\"password\");\r\n                    }}\r\n                    size=\"24px\"\r\n                    className={styles.eyeIcon}\r\n                  />\r\n                )}\r\n                <Input\r\n                  autoComplete=\"on\"\r\n                  paddingLeft=\"18px\"\r\n                  width=\"100%\"\r\n                  type={confirmType}\r\n                  value={fields.passwordConfirm}\r\n                  handleChange={(e) =>\r\n                    setFields({ ...fields, passwordConfirm: e.target.value })\r\n                  }\r\n                  handleBlur={handleBlur(\"passwordConfirm\")}\r\n                  placeholder=\"Confirm Password\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n              {touched.passwordConfirm && !fields.passwordConfirm && (\r\n                <p className={styles.inputError}>Required</p>\r\n              )}\r\n              {touched.passwordConfirm &&\r\n                fields.password !== fields.passwordConfirm && (\r\n                  <p className={styles.inputError}>Passwords must match</p>\r\n                )}\r\n            </div>\r\n            <div className={styles.passwordStrengthBar}>\r\n              <div\r\n                className={styles.passwordStrengthIndicator}\r\n                style={{\r\n                  width: `${(passwordStrength / 5) * 100}%`,\r\n                  backgroundColor:\r\n                    passwordStrength < 3\r\n                      ? \"red\"\r\n                      : passwordStrength < 4\r\n                      ? \"orange\"\r\n                      : \"green\",\r\n                }}></div>\r\n            </div>\r\n          </div>\r\n          <div className={styles.buttonsContainer}>\r\n            {errorMessage && <p className={styles.error}>{errorMessage}</p>}\r\n            <Button disabled={!isFormValid} variant=\"auth\" type=\"submit\">\r\n              Reset password\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPasswordForm;\r\n","import ResetPaswwordForm from \"./ResetPaswwordForm\";\r\n\r\nexport default ResetPaswwordForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ResetPasswordPage_section__hg3hm\",\"imageLeft\":\"ResetPasswordPage_imageLeft__ybeAR\",\"imageRight\":\"ResetPasswordPage_imageRight__LJIOB\"};","import ResetPasswordPage from \"./ResetPasswordPage\";\r\n\r\nexport default ResetPasswordPage;\r\n","import React from \"react\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport ResetPaswwordForm from \"../../components/ResetPaswwordForm\";\r\n\r\nimport leftImage from \"../../images/login-background-left-side.png\";\r\nimport rightImage from \"../../images/login-background-right-side.png\";\r\n\r\nimport styles from \"./ResetPasswordPage.module.css\";\r\n\r\nexport default function ResetPasswordPage() {\r\n  return (\r\n    <section className={styles.section}>\r\n      <div className={styles.imageLeft}>\r\n        <img src={leftImage} alt=\"Left\" />\r\n      </div>\r\n      <div className={styles.imageRight}>\r\n        <img src={rightImage} alt=\"Right\" />\r\n      </div>\r\n      <ResetPaswwordForm />\r\n    </section>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useToggle(initialValue) {\r\n    const [isOpen, setIsOpen] = useState(initialValue);\r\n\r\n    function toggle() {\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    return [isOpen, toggle];\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__DQKMR\",\"violet\":\"Button_violet__AJ44T\"};","import Button from \"./Button\";\r\n\r\nexport default Button;\r\n","import clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./Button.module.css\";\r\n\r\nexport default function Button({\r\n  type,\r\n  children,\r\n  variant = \"\",\r\n  theme = \"light\",\r\n  handleClick,\r\n  disabled,\r\n  className,\r\n}) {\r\n  return (\r\n    <button\r\n      disabled={disabled}\r\n      onClick={handleClick}\r\n      type={type}\r\n      className={clsx(\r\n        styles.button,\r\n        variant === \"auth\"\r\n          ? styles.button\r\n          : variant === \"send\"\r\n          ? theme === \"violet\"\r\n            ? styles.violet\r\n            : styles.button\r\n          : null, // If no match, fallback to no additional styles\r\n        className // Allow additional custom classes\r\n      )}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  type: PropTypes.string,\r\n  handleClick: PropTypes.func,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.object,\r\n    PropTypes.array,\r\n  ]),\r\n  className: PropTypes.string,\r\n};\r\n"],"names":["useFormValidation","initialState","validateFn","fields","setFields","useState","errors","setErrors","validateFields","newErrors","Object","keys","length","password","strength","setStrength","useEffect","test","calculatePasswordStrength","Input","_ref","type","placeholder","required","variant","className","name","handleChange","width","value","paddingLeft","autoComplete","handleBlur","handleClick","_jsx","style","styles","inputContainer","children","onClick","onChange","clsx","input","inputCenter","onBlur","arguments","undefined","touched","setTouched","reduce","acc","key","field","prev","navigate","useNavigate","token","useParams","console","log","passwordConfirm","validateNewPassword","useFormTouched","passwordStrength","usePasswordStrength","errorMessage","setErrorMessage","dispatch","useDispatch","setType","eyeVisible","toggleEyeVisible","useToggle","closedEyeVisible","toggleClosedEyeVisible","confirmType","setConfirmType","confirmEyeVisible","toggleConfirmEyeVisible","confirmClosedEyeVisible","toggleConfirmClosedEyeVisible","isFormValid","_jsxs","onSubmit","e","preventDefault","fieldsWithoutPasswordConfirm","newPassword","resetPassword","unwrap","then","toast","success","catch","err","error","VscEye","fill","size","VscEyeClosed","target","backgroundColor","Button","disabled","src","leftImage","alt","rightImage","ResetPaswwordForm","initialValue","isOpen","setIsOpen","theme"],"sourceRoot":""}