{"version":3,"file":"static/js/331.aa121a0e.chunk.js","mappings":"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","sources":["redux/public/selectorsChats.js","hooks/useChats.js","webpack://my-react-app/./src/pages/ConversationsPage/ConversationsPage.module.css?9d95","pages/ConversationsPage/index.js","pages/ConversationsPage/ConversationsPage.jsx"],"sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\nconst selectChatsState = (state) => state.chats;\r\n\r\nexport const selectActiveChats = createSelector(\r\n  [selectChatsState],\r\n  (chatsState) => chatsState.activeChats\r\n);\r\n\r\nexport const selectChats = createSelector(\r\n  [selectChatsState],\r\n  (chatsState) => chatsState.chats\r\n);\r\n\r\nexport const selectLoading = createSelector(\r\n  [selectChatsState],\r\n  (chatsState) => chatsState.loading\r\n);\r\n\r\nexport const selectError = createSelector(\r\n  [selectChatsState],\r\n  (chatsState) => chatsState.error\r\n);\r\n\r\nexport const selectVisitedChatIds = createSelector(\r\n  [selectChatsState],\r\n  (chatsState) => chatsState.visitedChatIds\r\n);\r\n\r\nconst chatByIdSelectorCache = {};\r\n\r\nexport const selectChatById = (chatId) => {\r\n  if (!chatByIdSelectorCache[chatId]) {\r\n    chatByIdSelectorCache[chatId] = createSelector(\r\n      [selectChats],\r\n      (chats) => chats.find((chat) => chat.id === chatId) || null\r\n    );\r\n  }\r\n  return chatByIdSelectorCache[chatId];\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  selectError,\r\n  selectActiveChats,\r\n  selectLoading,\r\n  selectChats,\r\n  selectChatById,\r\n  selectVisitedChatIds,\r\n} from \"../redux/public/selectorsChats\";\r\n\r\nexport const useChats = () => {\r\n  const dispatch = useDispatch();\r\n  const activeChats = useSelector(selectActiveChats);\r\n  const isLoading = useSelector(selectLoading);\r\n  const errorChats = useSelector(selectError);\r\n  const chats = useSelector(selectChats);\r\n  const chatById = useSelector(selectChatById);\r\n  const visitedChatIds = useSelector(selectVisitedChatIds);\r\n\r\n  return {\r\n    activeChats,\r\n    isLoading,\r\n    errorChats,\r\n    chats,\r\n    chatById,\r\n    dispatch,\r\n    visitedChatIds,\r\n  };\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"chatPage\":\"ConversationsPage_chatPage__H4rDt\",\"messageList\":\"ConversationsPage_messageList__r59i-\",\"outbox\":\"ConversationsPage_outbox__yZW4i\",\"inbox\":\"ConversationsPage_inbox__APHvR\",\"inboxUserCont\":\"ConversationsPage_inboxUserCont__yVTFL\",\"inboxUserImg\":\"ConversationsPage_inboxUserImg__Z91ex\",\"ownerName\":\"ConversationsPage_ownerName__wuXtV\",\"left\":\"ConversationsPage_left__KuYpb\",\"right\":\"ConversationsPage_right__37aVR\",\"msgOutboxContent\":\"ConversationsPage_msgOutboxContent__NxEdl\",\"timestampOutboxCont\":\"ConversationsPage_timestampOutboxCont__OjPDn\",\"timestampOutbox\":\"ConversationsPage_timestampOutbox__bnrP7\",\"sent\":\"ConversationsPage_sent__wgZDM\",\"read\":\"ConversationsPage_read__i6lkm\",\"timestampOutboxLight\":\"ConversationsPage_timestampOutboxLight__aS9jd\",\"msgInboxContent\":\"ConversationsPage_msgInboxContent__JoNdX\",\"timestampInbox\":\"ConversationsPage_timestampInbox__al3bY\",\"filePreview\":\"ConversationsPage_filePreview__JzXzR\",\"imagePreview\":\"ConversationsPage_imagePreview__zHlki\"};","import ConversationsPage from \"./ConversationsPage\";\r\n\r\nexport default ConversationsPage;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addUser } from \"../../redux/public/chatsSlice\";\r\n\r\nimport { useNavigate, useOutletContext } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useChats } from \"../../hooks/useChats\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport roby from \"../../images/Roby.jpg\";\r\n\r\nimport styles from \"./ConversationsPage.module.css\";\r\n\r\nexport default function ConversationsPage() {\r\n  const { chatId } = useParams();\r\n  const { chats } = useChats();\r\n  const { file } = useOutletContext();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const selectedChat = chats.find((chat) => chat.id === chatId);\r\n\r\n  const messages = selectedChat?.messages || [];\r\n\r\n  const globalChat = chats.find((chat) => chat.id === \"global\");\r\n\r\n  const globalMessages = [];\r\n\r\n  if (globalChat) {\r\n    globalChat.users?.forEach((us) => {\r\n      const userInfo = { chatId: us.id, user: us.user };\r\n      us.messages.forEach((msg) => {\r\n        globalMessages.push({ ...userInfo, ...msg });\r\n      });\r\n    });\r\n  }\r\n\r\n  // console.log(\"globalMessages :\", globalMessages);\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    let date = new Date(timestamp);\r\n    if (isNaN(date.getTime())) {\r\n      const fixedTimestamp = timestamp.replace(\r\n        /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}):(\\d{2})\\.(\\d{3})Z$/,\r\n        \"$1:59.$3Z\"\r\n      );\r\n      date = new Date(fixedTimestamp);\r\n    }\r\n    if (isNaN(date.getTime())) return \"\";\r\n\r\n    if (date.getSeconds() > 59) date.setSeconds(59);\r\n\r\n    const formattedTime = date.toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    });\r\n\r\n    const day = date.getDate();\r\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\r\n    const year = date.getFullYear();\r\n\r\n    return `${day} ${month} ${year}-${formattedTime}`;\r\n  };\r\n\r\n  const sortedGlolbalMessages = [...globalMessages].sort((old, neww) => {\r\n    const oldestMsg = new Date(formatTimestamp(old.sentAt));\r\n    const newestMsg = new Date(formatTimestamp(neww.sentAt));\r\n\r\n    return oldestMsg - newestMsg;\r\n  });\r\n\r\n  // console.log(\"sortedGlolbalMessages :\", sortedGlolbalMessages);\r\n\r\n  const sortedMessages = [...messages].sort((a, b) => {\r\n    const dateA = new Date(formatTimestamp(a.sentAt)).getTime();\r\n    const dateB = new Date(formatTimestamp(b.sentAt)).getTime();\r\n    return dateA - dateB; // de la cel mai vechi la cel mai nou\r\n  });\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [sortedMessages]);\r\n\r\n  useEffect(() => {\r\n    if (!selectedChat) {\r\n      navigate(\"/home/chat/global\", { replace: true });\r\n    }\r\n  }, [selectedChat, navigate]);\r\n\r\n  if (!selectedChat) {\r\n    return <div className={styles.notFound}>Chat not found</div>;\r\n  }\r\n\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const theme = localStorage.getItem(\"theme\") || \"dark\";\r\n\r\n  // const slowNav = setTimeout(() => {\r\n  //   return `home/chats/${msg.chatId}`;\r\n  // },1000)\r\n\r\n  return chatId !== \"global\" ? (\r\n    <div className={styles.chatPage}>\r\n      <ul className={styles.messageList}>\r\n        {sortedMessages.map((msg) =>\r\n          msg.isInbox ? (\r\n            <li key={msg.id} className={styles.inbox}>\r\n              <span className={clsx(styles.ownerName, styles.left)}>\r\n                {selectedChat?.user.name ?? \"\"}\r\n              </span>\r\n              <span className={styles.msgInboxContent}>{msg.content}</span>\r\n              <span className={styles.timestampInbox}>\r\n                {msg.sentAt\r\n                  ? formatTimestamp(msg.sentAt)\r\n                  : \"Time not available\"}\r\n              </span>\r\n            </li>\r\n          ) : (\r\n            <li key={msg.id} className={styles.outbox}>\r\n              <span className={clsx(styles.ownerName, styles.right)}>\r\n                {user ? user?.username : \"User\"}\r\n              </span>\r\n              <span className={styles.msgOutboxContent}>{msg?.content}</span>\r\n              <div className={styles.timestampOutboxCont}>\r\n                {msg?.isRead ? (\r\n                  <span\r\n                    className={clsx(\r\n                      styles.timestampOutbox,\r\n                      theme === \"light\"\r\n                        ? styles.timestampOutboxLight\r\n                        : styles.read\r\n                    )}>\r\n                    ✔✔\r\n                  </span>\r\n                ) : (\r\n                  <span\r\n                    className={clsx(\r\n                      styles.timestampOutbox,\r\n                      msg?.sentAt && theme === \"light\"\r\n                        ? styles.timestampOutboxLight\r\n                        : styles.sent\r\n                    )}>\r\n                    ✔\r\n                  </span>\r\n                )}\r\n                <span className={styles.timestampOutbox}>\r\n                  {msg?.sentAt\r\n                    ? formatTimestamp(msg?.sentAt)\r\n                    : \"Time not available\"}\r\n                </span>\r\n              </div>\r\n            </li>\r\n          )\r\n        )}\r\n\r\n        {file && (\r\n          <li className={styles.filePreview}>\r\n            {file.type.startsWith(\"image/\") ? (\r\n              <img\r\n                src={URL.createObjectURL(file)}\r\n                alt=\"File Preview\"\r\n                className={styles.imagePreview}\r\n              />\r\n            ) : (\r\n              <span>{file.name}</span>\r\n            )}\r\n          </li>\r\n        )}\r\n\r\n        {/* Referință pentru scroll */}\r\n        <div ref={messagesEndRef} />\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className={styles.chatPage}>\r\n      <ul className={styles.messageList}>\r\n        {sortedGlolbalMessages.map((msg, index) =>\r\n          msg.isInbox ? (\r\n            <li key={`${msg?.id}-${index}-glo`} className={styles.inbox}>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  dispatch(addUser({ chatId: msg?.chatId }));\r\n                  setTimeout(() => {\r\n                    navigate(`/home/chat/${msg.chatId}`);\r\n                  }, 500);\r\n                }}\r\n                className={styles.inboxUserCont}>\r\n                <img\r\n                  className={styles.inboxUserImg}\r\n                  src={msg?.user?.avatar ?? roby}\r\n                  alt=\"Avatar\"\r\n                />\r\n                <span className={clsx(styles.ownerName, styles.left)}>\r\n                  {msg?.user?.name ?? \"User\"}\r\n                </span>\r\n              </button>\r\n\r\n              <span className={styles.msgInboxContent}>{msg.content}</span>\r\n              <span className={styles.timestampInbox}>\r\n                {msg.sentAt\r\n                  ? formatTimestamp(msg.sentAt)\r\n                  : \"Time not available\"}\r\n              </span>\r\n            </li>\r\n          ) : (\r\n            <li key={`${msg?.id} - ${index}-bal`} className={styles.outbox}>\r\n              <span className={clsx(styles.ownerName, styles.right)}>\r\n                {user ? user?.username : \"Me\"}\r\n              </span>\r\n              <span className={styles.msgOutboxContent}>{msg?.content}</span>\r\n              <div className={styles.timestampOutboxCont}>\r\n                {msg?.isRead ? (\r\n                  <span\r\n                    className={clsx(\r\n                      styles.timestampOutbox,\r\n                      theme === \"light\"\r\n                        ? styles.timestampOutboxLight\r\n                        : styles.read\r\n                    )}>\r\n                    ✔✔\r\n                  </span>\r\n                ) : (\r\n                  <span\r\n                    className={clsx(\r\n                      styles.timestampOutbox,\r\n                      msg?.sentAt && theme === \"light\"\r\n                        ? styles.timestampOutboxLight\r\n                        : styles.sent\r\n                    )}>\r\n                    ✔\r\n                  </span>\r\n                )}\r\n                <span className={styles.timestampOutbox}>\r\n                  {msg?.sentAt\r\n                    ? formatTimestamp(msg?.sentAt)\r\n                    : \"Time not available\"}\r\n                </span>\r\n              </div>\r\n            </li>\r\n          )\r\n        )}\r\n\r\n        {file && (\r\n          <li className={styles.filePreview}>\r\n            {file.type.startsWith(\"image/\") ? (\r\n              <img\r\n                src={URL.createObjectURL(file)}\r\n                alt=\"File Preview\"\r\n                className={styles.imagePreview}\r\n              />\r\n            ) : (\r\n              <span>{file.name}</span>\r\n            )}\r\n          </li>\r\n        )}\r\n\r\n        {/* Referință pentru scroll */}\r\n        <div ref={messagesEndRef} />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["selectChatsState","state","chats","selectActiveChats","createSelector","chatsState","activeChats","selectChats","selectLoading","loading","selectError","error","selectVisitedChatIds","visitedChatIds","chatByIdSelectorCache","selectChatById","chatId","find","chat","id","useChats","dispatch","useDispatch","useSelector","isLoading","errorChats","chatById","useParams","file","useOutletContext","navigate","useNavigate","messagesEndRef","useRef","selectedChat","messages","globalChat","globalMessages","_globalChat$users","users","forEach","us","userInfo","user","msg","push","formatTimestamp","timestamp","date","Date","isNaN","getTime","fixedTimestamp","replace","getSeconds","setSeconds","formattedTime","toLocaleTimeString","hour","minute","getDate","toLocaleString","month","getFullYear","sortedGlolbalMessages","sort","old","neww","sentAt","sortedMessages","a","b","useEffect","_messagesEndRef$curre","current","scrollIntoView","behavior","_jsx","className","styles","notFound","children","JSON","parse","localStorage","getItem","theme","chatPage","_jsxs","messageList","map","_selectedChat$user$na","isInbox","inbox","clsx","ownerName","left","name","msgInboxContent","content","timestampInbox","outbox","right","username","msgOutboxContent","timestampOutboxCont","isRead","timestampOutbox","timestampOutboxLight","read","sent","filePreview","type","startsWith","src","URL","createObjectURL","alt","imagePreview","ref","index","_msg$user$avatar","_msg$user","_msg$user$name","_msg$user2","onClick","addUser","setTimeout","inboxUserCont","inboxUserImg","avatar","roby"],"sourceRoot":""}